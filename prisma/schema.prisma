generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id        String   @id @default(cuid())
  userName  String
  phone     String    @unique
  password  String   
  role      String   @default("staff")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Customer {
  id              String            @id @default(cuid())
  phone           String            @unique
  name            String
  loyaltyPoints   Int
  firstBoughtAt   DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  orders          Order[]
  purchaseHistory PurchaseHistory[]
}

model Category {
  id        String    @id @default(cuid())
  name      String
  photo     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products  Product[]
}

model Product {
  id              String            @id @default(cuid())
  name            String
  description     String
  photo           String
  categoryId      String
  stock           Int
  price           Float
  isAvailable     Boolean
  promotion       String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  category        Category          @relation(fields: [categoryId], references: [id])
  orderDetails    OrderDetail[]
  promotions      Promotion[]
  purchaseHistory PurchaseHistory[]
}

model Order {
  id           String        @id @default(cuid())
  customerId   String
  employeeId   String
  totalPrice   Float
  paidCash     Float
  returnCash   Float
  purchaseDate DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  customer     Customer      @relation(fields: [customerId], references: [id])
  employee     Employee      @relation(fields: [employeeId], references: [id])
  orderDetails OrderDetail[]
}

model OrderDetail {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model PurchaseHistory {
  id           String   @id @default(cuid())
  customerId   String
  productId    String
  purchaseDate DateTime @default(now())
  price        Float?
  updatedAt    DateTime @updatedAt
  customer     Customer @relation(fields: [customerId], references: [id])
  product      Product  @relation(fields: [productId], references: [id])
}

model Promotion {
  id        String   @id @default(cuid())
  productId String
  type      String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
}
